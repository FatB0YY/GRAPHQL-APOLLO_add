[{"C:\\Users\\Rodion\\Desktop\\graphql-apollo-course-master\\client\\src\\index.js":"1","C:\\Users\\Rodion\\Desktop\\graphql-apollo-course-master\\client\\src\\mutations\\user.js":"2","C:\\Users\\Rodion\\Desktop\\graphql-apollo-course-master\\client\\src\\query\\user.js":"3","C:\\Users\\Rodion\\Desktop\\graphql-apollo-course-master\\client\\src\\App.jsx":"4"},{"size":552,"mtime":1631979009082,"results":"5","hashOfConfig":"6"},{"size":242,"mtime":1631976970621,"results":"7","hashOfConfig":"6"},{"size":294,"mtime":1610631948000,"results":"8","hashOfConfig":"6"},{"size":3959,"mtime":1631978913575,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1xd3wi7",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"12"},"C:\\Users\\Rodion\\Desktop\\graphql-apollo-course-master\\client\\src\\index.js",[],["21","22"],"C:\\Users\\Rodion\\Desktop\\graphql-apollo-course-master\\client\\src\\mutations\\user.js",[],["23","24"],"C:\\Users\\Rodion\\Desktop\\graphql-apollo-course-master\\client\\src\\query\\user.js",[],"C:\\Users\\Rodion\\Desktop\\graphql-apollo-course-master\\client\\src\\App.jsx",["25","26","27"],"import React, { useEffect, useState } from 'react'\nimport './App.css'\nimport { useMutation, useQuery } from '@apollo/client'\nimport { GET_ALL_USERS, GET_ONE_USER } from './query/user'\nimport { CREATE_USER } from './mutations/user'\n\n// useQuery предназначен, чтобы использовать запросы\n\nconst App = () => {\n  // в поле data уже будет список пользователей\n  // также сохраним его в состоянии.\n  // то есть все те данные получим, которые запросили в query\n  // ---------\n  // refetch при вызове будет опять делаться запрос\n  // и поле data будет обновляться\n  // ---------\n  // вторым параметром принимают массив опцияй\n  // pollInterval: 500 повторяет сам запрос каждые пол секунды ептель\n  const { data, loading, error, refetch } = useQuery(GET_ALL_USERS)\n\n  // именованная деструктуризация, чтобы названия не дублировались\n  // передадим парметры только id.\n  // захардкодим его\n  const { data: oneUser, loading: loadingOneUser } = useQuery(GET_ONE_USER, {\n    variables: {\n      id: 1,\n    },\n  })\n\n  // нам возврщ. не объект а кортеж, где первый эл это ф-ция\n  // которая будет вызывать мутацию.\n  // а параметром передаем эту мутацию\n  const [newUser] = useMutation(CREATE_USER)\n\n  // список пользователей состояние\n  const [users, setUsers] = useState([])\n\n  // состояние для инпутов\n  const [username, setUsername] = useState('')\n  const [age, setAge] = useState(0)\n\n  // придет те данные, которые запрашивали (id и username)\n  console.log(oneUser)\n\n  //  если data будет изменяться, будем перезаписывать пользователей\n  useEffect(() => {\n    //   тк data изначально пустое, а флаг loading становится true когда данные подгрузлись\n    // сделаем проверку:\n    if (!loading) {\n      setUsers(data.getAllUsers)\n    }\n  }, [data])\n\n  const addUser = (event) => {\n    event.preventDefault()\n    newUser({\n      variables: {\n        // передаем перемнные, которые должня попасть в мутацию\n        input: {\n          // id генерируется на сервере\n          username,\n          age,\n        },\n      },\n    }).then(({ data }) => {\n      console.log(data)\n      // после всего очищаем инпуты\n      setUsername('')\n      setAge(0)\n    })\n  }\n  const getAll = (event) => {\n    event.preventDefault()\n    refetch()\n  }\n\n  if (loading) {\n    return <h1>Loading...</h1>\n  }\n\n  return (\n    <div>\n      <form>\n        <input\n          value={username}\n          onChange={(event) => setUsername(event.target.value)}\n          type='text'\n        />\n        <input\n          value={age}\n          onChange={(event) => setAge(event.target.value)}\n          type='number'\n        />\n        <div className='btns'>\n          <button onClick={(event) => addUser(event)}>Создать</button>\n          <button onClick={(event) => getAll(event)}>Получить</button>\n        </div>\n      </form>\n      {/* отрисовка пользователей */}\n      <div>\n        {users.map((user) => (\n          <div className='user'>\n            {user.id}. {user.username} {user.age}\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default App\n\n/*\n  fragment userWithoutAge on User {\n    id, username, posts{\n      title, content\n    }\n  }\n\n  query{\n    getAllUsers{\n      ...userWithoutAge\n    }\n  }\n*/\n",{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"28","replacedBy":"32"},{"ruleId":"30","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":19,"column":26,"nodeType":"36","messageId":"37","endLine":19,"endColumn":31},{"ruleId":"34","severity":1,"message":"38","line":24,"column":35,"nodeType":"36","messageId":"37","endLine":24,"endColumn":49},{"ruleId":"39","severity":1,"message":"40","line":52,"column":6,"nodeType":"41","endLine":52,"endColumn":12,"suggestions":"42"},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],["43"],["44"],"no-unused-vars","'error' is assigned a value but never used.","Identifier","unusedVar","'loadingOneUser' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loading'. Either include it or remove the dependency array.","ArrayExpression",["45"],"no-global-assign","no-unsafe-negation",{"desc":"46","fix":"47"},"Update the dependencies array to be: [data, loading]",{"range":"48","text":"49"},[1725,1731],"[data, loading]"]